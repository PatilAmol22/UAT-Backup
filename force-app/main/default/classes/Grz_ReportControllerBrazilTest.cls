@isTest(SeeAllData=false)
public class Grz_ReportControllerBrazilTest {
    Public  static testmethod void testCaseType1(){
        Id recordTypeId1 = Schema.SObjectType.Account.RecordTypeInfosByName.get('Distributor').RecordTypeId;
        Sales_Org__c sOrg1 = Grz_TestDataFactory.createSalesOrg(true, 'Test Org1111111','5191');
        Account acc1 = Grz_TestDataFactory.createUserAccount(true, 'Test Account11',recordTypeId1,sOrg1.Id);
        Sales_Order__c sorder= new Sales_Order__c();
        sorder.Currency_Brazil__c ='Billing BRL / Payment BRL';
        sorder.Sold_to_Party__c=acc1.id;
        sorder.Invoice_Status__c='Faturado';
        sorder.Type_of_Order__c='CONTRATO MÃE';
        sorder.Valid_From__c = system.today();
        insert sorder;
        Datetime yesterday = Datetime.now().addDays(-1);
        Test.setCreatedDate(sorder.Id, yesterday);
        Sales_Order__c sorder1= new Sales_Order__c();
        sorder1.Sold_to_Party__c=acc1.id;
        sorder.Currency_Brazil__c ='Billing USD / Payment BRL';
        sorder.Invoice_Status__c='Faturado';
        sorder1.Type_of_Order__c='	VENDA NORMAL';
        insert sorder1;
        Datetime yesterdayYear= system.now().addYears(-2);
        Test.setCreatedDate(sorder1.Id, yesterdayYear);
        list<Sales_Order_Line_Item__c> lineItemList= new list<Sales_Order_Line_Item__c>();
        Sales_Order_Line_Item__c lineItem= new Sales_Order_Line_Item__c();
        lineItem.Sale_Order__c=sorder.id;
        lineItemList.add(lineItem);
        Sales_Order_Line_Item__c lineItem1= new Sales_Order_Line_Item__c();
        lineItem1.Sale_Order__c=sorder1.id;
        lineItemList.add(lineItem1);
        
        
        Invoice__c invo = new Invoice__c();
        // inv.name='test';
        invo.Sold_to_Party__c=acc1.id;
        invo.Sales_Order__c=sorder.id;
        invo.Billing_Date__c=system.today();
        invo.Billing_Doc_Number__c='test';
        insert invo;
        Datetime yesterdayYear1= system.now().addYears(-2);
        Test.setCreatedDate(invo.Id, yesterdayYear1);
        Invoice__c invo1 = new Invoice__c();
        // inv.name='test';
        invo.Sales_Order__c=sorder1.id;
        invo1.Sold_to_Party__c=acc1.id;
        invo.Billing_Date__c=system.today();
        invo.Billing_Doc_Number__c='test';
        insert invo1;
        Datetime yesterdayYear2= system.now().addYears(-2);
        Test.setCreatedDate(invo1.Id, yesterdayYear2);
        list<Invoice_Line_Item__c> invLineItemList= new list<Invoice_Line_Item__c>();
        Invoice_Line_Item__c invLine= new Invoice_Line_Item__c();
        invLine.Invoice__c=invo.id;
        invLine.Quantity__c=1223;
        invLine.Net_Value__c=122;
        invLineItemList.add(invLine);
        Invoice_Line_Item__c invLine1= new Invoice_Line_Item__c();
        invLine1.Invoice__c=invo1.id;
        invLine1.Quantity__c=1223;
        invLine1.Net_Value__c=122;
        invLineItemList.add(invLine1);
        insert invLineItemList;
        Test.startTest();  
        insert lineItemList;
        system.debug('lineItemList:'+lineItemList);
        Id recordTypeId = Schema.SObjectType.Account.RecordTypeInfosByName.get('Distributor').RecordTypeId;
        Sales_Org__c sOrg = Grz_TestDataFactory.createSalesOrg(true, 'Test Org','5191');
        Account acc = Grz_TestDataFactory.createUserAccount(false, 'Test Account',recordTypeId,sOrg.Id);
        acc.SAP_Code__c='898989';
        insert acc;
        Contact con = Grz_TestDataFactory.createContact(true, 'Test Contact',acc.Id);
        Profile pro = [SELECT Id FROM Profile WHERE Name = 'Brazil Partner Community Distributor Profile'];
        Profile pro1 = [SELECT Id FROM Profile WHERE Name = 'System Administrator' Limit 1];
        User usr1 = Grz_TestDataFactory.createInternalUser(true,pro1.Id);
        User usr=new User();
        System.runAs(usr1){
            Group gg=Grz_TestDataFactory.creategroup(true);
            usr = Grz_TestDataFactory.createExternalUser(true,pro.Id,con.Id);
            GroupMember gm=Grz_TestDataFactory.createGM(true,gg.Id,usr.id);
        }
        Id recordTypeShowId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get('Brazil_Case_Process').getRecordTypeId();
        Case cs = Grz_TestDataFactory.createCaseRecord(false, 'Test Case', 'New', acc.Id, recordTypeShowId);
        cs.Type = 'Alterar Pedido para Modalidade AG';
        insert cs;
        Id recordTypePortal = Schema.SObjectType.Partner_Portal_Configuration__c.RecordTypeInfosByName.get('CaseConfiguration').RecordTypeId;
        Partner_Portal_Configuration__c pr = new Partner_Portal_Configuration__c();
        pr.CaseType__c = 'Alterar Pedido para Modalidade AG,Atraso de Entrega';
        pr.Language__c='pt-BR';
        pr.Name = 'CaseTypePicklistBrazil';
        pr.RecordTypeId = recordTypePortal;
        insert pr;
        Partner_Portal_Configuration__c pr1 = new Partner_Portal_Configuration__c();
        pr1.CaseType__c = 'Pendente Analista,Resolvido,pendente para aprovação,Em Andamento,Rejeitado,Fechado,Pendente Solicitante,Pendente Aprovação,Aprovado';
        pr1.Language__c='pt-BR';
        pr1.Name = 'CaseStatusPicklistBrazil';
        pr1.RecordTypeId = recordTypePortal;
        insert pr1;
        Brazil_Portal_Configuration__c bp = new Brazil_Portal_Configuration__c();
        bp.Name = 'Configuration';
        bp.Portal_Sales_Order_Type__c = 'CONTRATO MÃE';
        insert bp;
        Grz_ReportControllerBrazil.SalesOrderLineItemWrap ob2= new Grz_ReportControllerBrazil.SalesOrderLineItemWrap();
        ob2.totalVolume=10;
        ob2.salesOrderName='salesOrderName';
        ob2.salesOrderStatus='salesOrderStatus';
        ob2.salesOrderLineItemStatus='salesOrderLineItemStatus';
        ob2.typeOfOrder='typeOfOrder';
        ob2.salesOrderCreatedDate='salesOrderCreatedDate';
        ob2.salesOrderCTC='salesOrderCTC';
        ob2.customer='customer';
        ob2.lineItemGroup='lineItemGroup';
        ob2.city='city';
        ob2.currncy='currncy';
        ob2.product='product';
        
        Test.stopTest();
        PageReference pageRef = Page.Grz_InvoiceReportBrazilXLS; // Add your VF page Name here
        pageRef.setRedirect(true);
        pageRef.getParameters().put('startDate',string.valueOf(system.today()));
        pageRef.getParameters().put('endDate',string.valueOf(system.today().addDays(2)));
        pageRef.getParameters().put('distributor','7062');
        Test.setCurrentPage(pageRef);
        Grz_ReportControllerBrazil obj= new Grz_ReportControllerBrazil();
        obj.getDataForVF();
        
        
        Grz_ReportControllerBrazil.getCaseTypeData('2020-01-01','2030-01-01','All'); 
        Grz_ReportControllerBrazil.getCaseStatusData('2020-01-01','2030-01-01','All');
        Grz_ReportControllerBrazil.getProductCategoryData('2020-01-01','2030-01-01','All');
        Grz_ReportControllerBrazil.getInvoiceBrandData('2020-01-01','2030-01-01','All');
        Grz_ReportControllerBrazil.getInvoiceDetails('2020-01-01','2030-01-01','All',1,null,'');
        Grz_ReportControllerBrazil.getInvoiceDetails('2020-01-01','2030-01-01','All',1,10,'12');
        Grz_ReportControllerBrazil.getSalesOrderLineItemDetails('2020-01-01','2030-01-01','All',1,10,'12');
        Grz_ReportControllerBrazil.getAccountInformation();
        Grz_ReportControllerBrazil.InvoiceWrap inv = new Grz_ReportControllerBrazil.InvoiceWrap();
        inv.billingDate = 'test';
        inv.billingDocNumber = 'test';
        inv.distributor = 'test';
        inv.customerTaxNumber = 'test';
        inv.gstNumber = 'test';
        inv.crncy = 'test';
        inv.quantity = 'test';
        inv.totalValue = 'test';
        inv.product = 'test';
        inv.ivId='a1X6D000000bs39UAA';
        
        list< Grz_ReportControllerBrazil.CaseData > caseDataList= new list< Grz_ReportControllerBrazil.CaseData >();
        Grz_ReportControllerBrazil.CaseData ob= new   Grz_ReportControllerBrazil.CaseData('test',10);
        ob.name='test';
        ob.value=10;
        caseDataList.add(ob);
        list<string> cstr= new list<string>();
        cstr.add('test');
        list< Grz_ReportControllerBrazil.ResultWrapper> resultWrapperList= new list< Grz_ReportControllerBrazil.ResultWrapper>();
        Grz_ReportControllerBrazil.ResultWrapper rw = new Grz_ReportControllerBrazil.ResultWrapper();
        rw.isMainParent = true;
        rw.cstrCode=cstr;
        resultWrapperList.add(rw);
        Grz_ReportControllerBrazil.Grz_CaseSummaryWrapper ob1= new Grz_ReportControllerBrazil.Grz_CaseSummaryWrapper();
        ob1.CredDonut=caseDataList;
        ob1.Result=resultWrapperList;
    }
    
    Public  static testmethod void testCaseType(){
        Id recordTypeId1 = Schema.SObjectType.Account.RecordTypeInfosByName.get('Distributor').RecordTypeId;
        Sales_Org__c sOrg1 = Grz_TestDataFactory.createSalesOrg(true, 'Test Org1111111','5191');
        Account acc1 = Grz_TestDataFactory.createUserAccount(true, 'Test Account11',recordTypeId1,sOrg1.Id);
        Sales_Order__c sorder= new Sales_Order__c();
        sorder.Currency_Brazil__c ='Billing BRL / Payment BRL';
        sorder.Sold_to_Party__c=acc1.id;
        sorder.Invoice_Status__c='Pedido em Análise';
        sorder.Type_of_Order__c='CONTRATO MÃE';
        sorder.Valid_From__c = system.today();
        insert sorder;
        Datetime yesterday = Datetime.now().addDays(-1);
        Test.setCreatedDate(sorder.Id, yesterday);
        Sales_Order__c sorder1= new Sales_Order__c();
        sorder1.Sold_to_Party__c=acc1.id;
        sorder.Currency_Brazil__c ='Billing USD / Payment BRL';
        sorder.Invoice_Status__c='Faturado';
        sorder1.Type_of_Order__c='	VENDA NORMAL';
        insert sorder1;
        Datetime yesterdayYear= system.now().addYears(-2);
        Test.setCreatedDate(sorder1.Id, yesterdayYear);
        list<Sales_Order_Line_Item__c> lineItemList= new list<Sales_Order_Line_Item__c>();
        Sales_Order_Line_Item__c lineItem= new Sales_Order_Line_Item__c();
        lineItem.Sale_Order__c=sorder.id;
        lineItemList.add(lineItem);
        Sales_Order_Line_Item__c lineItem1= new Sales_Order_Line_Item__c();
        lineItem1.Sale_Order__c=sorder1.id;
        lineItemList.add(lineItem1);
        
        
        Invoice__c invo = new Invoice__c();
        // inv.name='test';
        invo.Sold_to_Party__c=acc1.id;
        invo.Sales_Order__c=sorder.id;
        invo.Billing_Date__c=system.today();
        invo.Billing_Doc_Number__c='test';
        insert invo;
        Datetime yesterdayYear1= system.now().addYears(-2);
        Test.setCreatedDate(invo.Id, yesterdayYear1);
        Invoice__c invo1 = new Invoice__c();
        // inv.name='test';
        invo.Sales_Order__c=sorder1.id;
        invo1.Sold_to_Party__c=acc1.id;
        invo.Billing_Date__c=system.today();
        invo.Billing_Doc_Number__c='test';
        insert invo1;
        Datetime yesterdayYear2= system.now().addYears(-2);
        Test.setCreatedDate(invo1.Id, yesterdayYear2);
        list<Invoice_Line_Item__c> invLineItemList= new list<Invoice_Line_Item__c>();
        Invoice_Line_Item__c invLine= new Invoice_Line_Item__c();
        invLine.Invoice__c=invo.id;
        invLine.Quantity__c=1223;
        invLine.Net_Value__c=122;
        invLineItemList.add(invLine);
        Invoice_Line_Item__c invLine1= new Invoice_Line_Item__c();
        invLine1.Invoice__c=invo1.id;
        invLine1.Quantity__c=1223;
        invLine1.Net_Value__c=122;
        invLineItemList.add(invLine1);
        insert invLineItemList;
        Test.startTest();  
        insert lineItemList;
        system.debug('lineItemList:'+lineItemList);
        Id recordTypeId = Schema.SObjectType.Account.RecordTypeInfosByName.get('Distributor').RecordTypeId;
        Sales_Org__c sOrg = Grz_TestDataFactory.createSalesOrg(true, 'Test Org','5191');
        Account acc = Grz_TestDataFactory.createUserAccount(false, 'Test Account',recordTypeId,sOrg.Id);
        acc.SAP_Code__c='898989';
        insert acc;
        Contact con = Grz_TestDataFactory.createContact(true, 'Test Contact',acc.Id);
        Profile pro = [SELECT Id FROM Profile WHERE Name = 'Brazil Partner Community Distributor Profile'];
        Profile pro1 = [SELECT Id FROM Profile WHERE Name = 'System Administrator' Limit 1];
        User usr1 = Grz_TestDataFactory.createInternalUser(true,pro1.Id);
        User usr=new User();
        System.runAs(usr1){
            Group gg=Grz_TestDataFactory.creategroup(true);
            usr = Grz_TestDataFactory.createExternalUser(true,pro.Id,con.Id);
            GroupMember gm=Grz_TestDataFactory.createGM(true,gg.Id,usr.id);
        }
        Id recordTypeShowId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get('Brazil_Case_Process').getRecordTypeId();
        Case cs = Grz_TestDataFactory.createCaseRecord(false, 'Test Case', 'New', acc.Id, recordTypeShowId);
        cs.Type = 'Alterar Pedido para Modalidade AG';
        insert cs;
        Id recordTypePortal = Schema.SObjectType.Partner_Portal_Configuration__c.RecordTypeInfosByName.get('CaseConfiguration').RecordTypeId;
        Partner_Portal_Configuration__c pr = new Partner_Portal_Configuration__c();
        pr.CaseType__c = 'Alterar Pedido para Modalidade AG,Atraso de Entrega';
        pr.Language__c='pt-BR';
        pr.Name = 'CaseTypePicklistBrazil';
        pr.RecordTypeId = recordTypePortal;
        insert pr;
        Partner_Portal_Configuration__c pr1 = new Partner_Portal_Configuration__c();
        pr1.CaseType__c = 'Pendente Analista,Resolvido,pendente para aprovação,Em Andamento,Rejeitado,Fechado,Pendente Solicitante,Pendente Aprovação,Aprovado';
        pr1.Language__c='pt-BR';
        pr1.Name = 'CaseStatusPicklistBrazil';
        pr1.RecordTypeId = recordTypePortal;
        insert pr1;
        Brazil_Portal_Configuration__c bp = new Brazil_Portal_Configuration__c();
        bp.Name = 'Configuration';
        bp.Portal_Sales_Order_Type__c = 'CONTRATO MÃE';
        insert bp;
        Grz_ReportControllerBrazil.SalesOrderLineItemWrap ob2= new Grz_ReportControllerBrazil.SalesOrderLineItemWrap();
        ob2.totalVolume=10;
        ob2.salesOrderName='salesOrderName';
        ob2.salesOrderStatus='salesOrderStatus';
        ob2.salesOrderLineItemStatus='salesOrderLineItemStatus';
        ob2.typeOfOrder='typeOfOrder';
        ob2.salesOrderCreatedDate='salesOrderCreatedDate';
        ob2.salesOrderCTC='salesOrderCTC';
        ob2.customer='customer';
        ob2.lineItemGroup='lineItemGroup';
        ob2.city='city';
        ob2.currncy='currncy';
        ob2.product='product';
        
        Test.stopTest();
        PageReference pageRef = Page.Grz_InvoiceReportBrazilXLS; // Add your VF page Name here
        pageRef.setRedirect(true);
        pageRef.getParameters().put('startDate',string.valueOf(system.today()));
        pageRef.getParameters().put('endDate',string.valueOf(system.today().addDays(2)));
        pageRef.getParameters().put('distributor','7062');
        Test.setCurrentPage(pageRef);
        Grz_ReportControllerBrazil obj= new Grz_ReportControllerBrazil();
        obj.getDataForVF();
        
        
        Grz_ReportControllerBrazil.getCaseTypeData('2020-01-01','2030-01-01','All'); 
        Grz_ReportControllerBrazil.getCaseStatusData('2020-01-01','2030-01-01','All');
        Grz_ReportControllerBrazil.getProductCategoryData('2020-01-01','2030-01-01','All');
        Grz_ReportControllerBrazil.getInvoiceBrandData('2020-01-01','2030-01-01','All');
        Grz_ReportControllerBrazil.getInvoiceDetails('2020-01-01','2030-01-01','All',1,null,'');
        Grz_ReportControllerBrazil.getInvoiceDetails('2020-01-01','2030-01-01','All',1,10,'12');
        Grz_ReportControllerBrazil.getSalesOrderLineItemDetails('2020-01-01','2030-01-01','All',1,10,'12');
        Grz_ReportControllerBrazil.getAccountInformation();
        Grz_ReportControllerBrazil.InvoiceWrap inv = new Grz_ReportControllerBrazil.InvoiceWrap();
        inv.billingDate = 'test';
        inv.billingDocNumber = 'test';
        inv.distributor = 'test';
        inv.customerTaxNumber = 'test';
        inv.gstNumber = 'test';
        inv.crncy = 'test';
        inv.quantity = 'test';
        inv.totalValue = 'test';
        inv.product = 'test';
        inv.ivId='a1X6D000000bs39UAA';
        
        list< Grz_ReportControllerBrazil.CaseData > caseDataList= new list< Grz_ReportControllerBrazil.CaseData >();
        Grz_ReportControllerBrazil.CaseData ob= new   Grz_ReportControllerBrazil.CaseData('test',10);
        ob.name='test';
        ob.value=10;
        caseDataList.add(ob);
        list<string> cstr= new list<string>();
        cstr.add('test');
        list< Grz_ReportControllerBrazil.ResultWrapper> resultWrapperList= new list< Grz_ReportControllerBrazil.ResultWrapper>();
        Grz_ReportControllerBrazil.ResultWrapper rw = new Grz_ReportControllerBrazil.ResultWrapper();
        rw.isMainParent = true;
        rw.cstrCode=cstr;
        resultWrapperList.add(rw);
        Grz_ReportControllerBrazil.Grz_CaseSummaryWrapper ob1= new Grz_ReportControllerBrazil.Grz_CaseSummaryWrapper();
        ob1.CredDonut=caseDataList;
        ob1.Result=resultWrapperList;
    }
    Public  static testmethod void testSalesItemReport(){
        Test.startTest();   
        Id recordTypeId = Schema.SObjectType.Account.RecordTypeInfosByName.get('Distributor').RecordTypeId;
        Sales_Org__c sOrg = Grz_TestDataFactory.createSalesOrg(true, 'Org','5191');
        Account acc = Grz_TestDataFactory.createUserAccount(true, 'Test Account',recordTypeId,sOrg.Id);
        Account acc1 = new Account();
        acc1.Name = 'AccountName';
        acc1.RecordTypeId = recordTypeId;
        acc1.SAP_Code__c = '234442';
        acc1.Sales_Org__c = sOrg.id;
        acc1.Sap_UserId__c = 'UPLINTCRM';
        acc1.Sub_Parent_Account__c=acc.id;
        insert acc1;
        Contact con = Grz_TestDataFactory.createContact(true, 'Test Contact',acc.Id);
        Profile pro = [SELECT Id FROM Profile WHERE Name = 'Brazil Partner Community Distributor Profile'];
        Profile pro1 = [SELECT Id FROM Profile WHERE Name = 'System Administrator'];
        User usr1 = Grz_TestDataFactory.createInternalUser(true,pro1.Id);
        User usr = new User();
        System.runAs(usr1){
            Group gg = Grz_TestDataFactory.creategroup(true);
            usr = Grz_TestDataFactory.createExternalUser(false,pro.Id,con.Id);
            usr.Sales_Order_Notification__c = true;
            insert usr;
            GroupMember gm = Grz_TestDataFactory.createGM(true,gg.Id,usr.id);
        }
        Sales_Order__c salesObj1 = Grz_TestDataFactory.createSalesOrderRecord(false, '7062133268','Approved',Date.today(), acc1.Id);
        salesObj1.Sales_Org_lk__c = sorg.Id;
        salesObj1.Invoice_Status__c = 'test';
        salesObj1.Type_of_Order__c='VENDA NORMAL';
        insert salesObj1;
        Brazil_Portal_Configuration__c bp = new Brazil_Portal_Configuration__c();
        bp.Name = 'Configuration';
        bp.Portal_Sales_Order_Type__c = 'CONTRATO MÃE \n VENDA NORMAL';
        insert bp;
        Sales_Order_Line_Item__c orderlineObj = new Sales_Order_Line_Item__c();
        orderlineObj.Sale_Order__c = salesObj1.Id;        
        orderlineObj.Per_Unit_Discount__c = 4;
        //insert orderlineObj;
        Test.stopTest();
        
        List<String> soIds = new List<String>();
        soIds.add(salesObj1.Id);
        //Grz_ReportControllerBrazil.getSalesOrderLineItemDetails('2020-01-01','2030-01-01','All',1,10,'');
        //Grz_ReportControllerBrazil.getSalesOrderLineItemDetails('2020-01-01','2030-01-01','234442',1,10,null);
        Grz_ReportControllerBrazil.getSalesOrderLineItemDetails('2020-01-01','2030-01-01',null,1,10,null);
    }
}