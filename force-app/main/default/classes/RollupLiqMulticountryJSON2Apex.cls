//
// Generated by RollupLiqMulticountryJSON2Apex http://RollupLiqMulticountryJSON2Apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class RollupLiqMulticountryJSON2Apex {

    public Integer totalSize {get;set;} 
    public Boolean done {get;set;} 
    public List<Records> records {get;set;} 

    public RollupLiqMulticountryJSON2Apex(JSONParser parser) {
        while (parser.nextToken() != System.JSONToken.END_OBJECT) {
            if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                String text = parser.getText();
                if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                    if (text == 'totalSize') {
                        totalSize = parser.getIntegerValue();
                    } else if (text == 'done') {
                        done = parser.getBooleanValue();
                    } else if (text == 'records') {
                        records = arrayOfRecords(parser);
                    } else {
                        System.debug(LoggingLevel.WARN, 'RollupLiqMulticountryJSON2Apex consuming unrecognized property: '+text);
                        consumeObject(parser);
                    }
                }
            }
        }
    }
    
    public class Attributes {
        public String type_Z {get;set;} // in json: type

        public Attributes(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'type') {
                            type_Z = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Attributes consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Records {
        public Attributes attributes {get;set;} 
        public String SKU_Code {get;set;} 
        public String Brand_Name {get;set;} 
        public String SKU_Description {get;set;} 
        public Double expr0 {get;set;} 
        public Double expr1 {get;set;} 
        public Double expr2 {get;set;} 
        public Double expr3 {get;set;} 
        public Double expr4 {get;set;} 
        public Double expr5 {get;set;} 
        public Double expr6 {get;set;}
        public Double expr7 {get;set;}
        public Double expr8 {get;set;}
        public Double expr9 {get;set;}
        public String UOM {get;set;}

        public Records(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'attributes') {
                            attributes = new Attributes(parser);
                        } else if (text == 'SKU_Code__c') {
                            SKU_Code = parser.getText();
                        } else if (text == 'Brand_Name__c') {
                            Brand_Name = parser.getText();
                        } else if (text == 'SKU_Description__c') {
                            SKU_Description = parser.getText();
                        } else if (text == 'expr0') {
                            expr0 = parser.getDoubleValue();
                        } else if (text == 'expr1') {
                            expr1 = parser.getDoubleValue();
                        } else if (text == 'expr2') {
                            expr2 = parser.getDoubleValue();
                        } else if (text == 'expr3') {
                            expr3 = parser.getDoubleValue();
                        } else if (text == 'expr4') {
                            expr4 = parser.getDoubleValue();
                        } else if (text == 'expr5') {
                            expr5 = parser.getDoubleValue();
                        } else if (text == 'expr6') {
                            expr6 = parser.getDoubleValue();
                        }else if (text == 'expr7') {
                            expr7 = parser.getDoubleValue();
                        }else if (text == 'expr8') {
                            expr8 = parser.getDoubleValue();
                        }else if (text == 'expr9') {
                            //System.debug('expr9 -->'+parser.getDoubleValue());
                            expr9 = parser.getDoubleValue();
                        }else if (text == 'UOM__c') {
                            //System.debug('expr9 -->'+parser.getDoubleValue());
                            UOM = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Records consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    
    public static RollupLiqMulticountryJSON2Apex parse(String json) {
        System.JSONParser parser = System.JSON.createParser(json);
        return new RollupLiqMulticountryJSON2Apex(parser);
    }
    
    public static void consumeObject(System.JSONParser parser) {
        Integer depth = 0;
        do {
            System.JSONToken curr = parser.getCurrentToken();
            if (curr == System.JSONToken.START_OBJECT || 
                curr == System.JSONToken.START_ARRAY) {
                depth++;
            } else if (curr == System.JSONToken.END_OBJECT ||
                curr == System.JSONToken.END_ARRAY) {
                depth--;
            }
        } while (depth > 0 && parser.nextToken() != null);
    }
    







    private static List<Records> arrayOfRecords(System.JSONParser p) {
        List<Records> res = new List<Records>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Records(p));
        }
        return res;
    }


}